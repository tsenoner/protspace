name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write
    outputs:
      released: ${{ steps.semantic_release.outputs.released }}
      tag: ${{ steps.semantic_release.outputs.tag }}
    env:
      UV_TOOL_DIR: /tmp/.uv-tool

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}
          # Use PAT token for checkout to allow pushing to protected branches
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Force correct release branch
        run: |
          git checkout -B ${{ github.ref_name }} ${{ github.sha }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Restore uv tools
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-tools
          key: uv-tools-${{ runner.os }}-psr-v9.11.1
          restore-keys: |
            uv-tools-${{ runner.os }}-psr-v9.11.1
            uv-tools-${{ runner.os }}

      - name: Install Python Semantic Release
        run: uv tool install python-semantic-release@v9.11.1

      - name: Run Semantic Release
        id: semantic_release
        env:
          # Use PAT token that can bypass branch protection
          GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Running semantic release..."

          # Check if we have the special token
          if [ -z "${{ secrets.SEMANTIC_RELEASE_TOKEN }}" ]; then
            echo "WARNING: SEMANTIC_RELEASE_TOKEN not found, using GITHUB_TOKEN (may fail on protected branches)"
          fi

          # Run semantic release with error handling
          if output=$(uv tool run --from python-semantic-release semantic-release version --commit --changelog --push --tag --vcs-release 2>&1); then
            echo "$output"
            echo "released=true" >> $GITHUB_OUTPUT

            # Get the latest tag
            latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          else
            echo "Semantic release failed:"
            echo "$output"

            # Check if it's just "no release needed"
            if echo "$output" | grep -q "No release will be made\|no new version"; then
              echo "No release needed"
              echo "released=false" >> $GITHUB_OUTPUT
              latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
              echo "tag=$latest_tag" >> $GITHUB_OUTPUT
            else
              echo "Genuine semantic release error - failing the job"
              exit 1
            fi
          fi

  trigger-builds:
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Trigger Python Build
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: trigger-python-build
          client-payload: '{"tag": "${{ needs.release.outputs.tag }}"}'

      - name: Trigger Docker Build
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: trigger-docker-build
          client-payload: '{"tag": "${{ needs.release.outputs.tag }}"}'